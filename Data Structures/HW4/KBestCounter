/* KBestCounter class that takes in given kand then user can insert numbers and will return the k'th largest back
 * line 33 to return the list in order of largest to smallest but does not change the actual heap's ordering.
 */ 
import java.util.PriorityQueue;
import java.util.*;

public class KBestCounter<T extends Comparable<? super T>> {

    PriorityQueue<T> heap;
    int k, size;

    public KBestCounter(int in) {
        k = in;
        heap = new PriorityQueue(k);
        size = 0;
    }

    public void count(T x) {
        if(size >= k){
            if(x.compareTo(heap.peek()) > 0){
                heap.remove();
                heap.add(x);
            }else
                ;
        }else{
            heap.add(x);
            size++;
        }
    }

    public List<T> kbest() {
        List<T> theList = new ArrayList<T>(heap);
        Collections.sort(theList, Collections.reverseOrder());
        return theList;
    }

}
